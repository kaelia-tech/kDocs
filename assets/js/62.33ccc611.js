(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{250:function(e,t,a){"use strict";a.r(t);var s=a(2),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"infrastructure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#infrastructure"}},[e._v("#")]),e._v(" Infrastructure")]),e._v(" "),a("h2",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[e._v("#")]),e._v(" Docker")]),e._v(" "),a("p",[e._v("Remove untaged/intermediate images generated by builds:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker rmi $(docker images | grep \"<none>\" | awk '{print $3}')\n")])])]),a("p",[e._v("Follow-up logs while running a container:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker logs container_name -f --tail 100\n")])])]),a("p",[e._v("Get detailed healthcheck status for a running container:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker inspect -f '{{json .State.Health.Status}}' container_name\n")])])]),a("p",[e._v("Find the location of the log file of a container:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker inspect --format='{{.LogPath}}' container_name\n")])])]),a("p",[e._v("Find the location of a named volume of a container:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker volume inspect volume_name\n")])])]),a("p",[e._v("Export the logs with errors in a file:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker logs aktnmap > aktnmap.log 2>&1\n")])])]),a("p",[e._v("Quick container fix:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Perform configuration changes inside the container then exit\ndocker exec -it container_name bash\n// Or copy configuration files to host then back to container\ndocker cp container_name:/conf/config_file .\n// Edit config file\ndocker cp config_file container_name:/conf\ndocker commit container_name repository:tag\ndocker-compose down ...\ndocker-compose up ...\n")])])]),a("p",[e._v("Check why a swarm service did not start (empty logs, no replica):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker service ps --no-trunc {serviceName}\n")])])]),a("p",[e._v("To access host in Docker Desktop Edition on "),a("a",{attrs:{href:"https://docs.docker.com/docker-for-windows/networking/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Windows"),a("OutboundLink")],1),e._v(" or "),a("a",{attrs:{href:"https://docs.docker.com/docker-for-mac/networking/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mac"),a("OutboundLink")],1),e._v(" use the special DNS name "),a("code",[e._v("host.docker.internal")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"scaleway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scaleway"}},[e._v("#")]),e._v(" Scaleway")]),e._v(" "),a("p",[e._v("A "),a("a",{attrs:{href:"https://gist.github.com/cnouguier/a1ecc88f67819a610ae8e4d221789a8c",target:"_blank",rel:"noopener noreferrer"}},[e._v("step-by-step configuration"),a("OutboundLink")],1),e._v(" of a new server with Docker and a single logical volume.")]),e._v(" "),a("h2",{attrs:{id:"networking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#networking"}},[e._v("#")]),e._v(" Networking")]),e._v(" "),a("p",[e._v("List all running ssh sessions: "),a("code",[e._v("netstat -tnpa | grep 'ESTABLISHED.*sshd'")])]),e._v(" "),a("p",[e._v("List all ssh session attempts: "),a("code",[e._v("cat /var/log/auth.log")])]),e._v(" "),a("h3",{attrs:{id:"development-domains"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#development-domains"}},[e._v("#")]),e._v(" Development domains")]),e._v(" "),a("p",[e._v("Some development tasks like OAuth2 authentication have strict security concerns so that you cannot use "),a("code",[e._v("localhost")]),e._v(', non-standard ports or need to enforce HTTPS in all URLs. Here is how to setup a "fake" domain on your host.')]),e._v(" "),a("p",[e._v("Let's say we have our app running on "),a("code",[e._v("localhost:8080")]),e._v(" in HTTP or "),a("code",[e._v("localhost:8083")]),e._v(" in HTTPS. First, edit the "),a("code",[e._v("hosts")]),e._v(" file ("),a("em",[e._v("/etc/hosts")]),e._v(" under Linux or "),a("em",[e._v("C:\\Windows\\System32\\drivers\\etc\\hosts")]),e._v(" under Windows) and add this line to redirect the domain to local host:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1 test.airbusoidc.com\n")])])]),a("p",[e._v("Then, since the "),a("code",[e._v("hosts")]),e._v(" file does not allow to manage port redirections we need to do so using the operating system network tools.")]),e._v(" "),a("h4",{attrs:{id:"windows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[e._v("#")]),e._v(" Windows")]),e._v(" "),a("p",[e._v("To see what is currently running:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('netstat -a -n -p TCP | grep "LISTENING"\n')])])]),a("p",[e._v("To add port redirection for HTTP:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("netsh interface portproxy add v4tov4 listenport=80 listenaddress=127.0.0.1 connectport=8080 connectaddress=127.0.0.1\n")])])]),a("p",[e._v("To add port redirection for HTTPS:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("netsh interface portproxy add v4tov4 listenport=443 listenaddress=127.0.0.1 connectport=8083 connectaddress=127.0.0.1\n")])])]),a("p",[e._v("To see running proxied port:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("netsh interface portproxy show v4tov4\n")])])]),a("p",[e._v("To see remove proxied port:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("netsh interface portproxy delete v4tov4 listenport=80 listenaddress=127.0.0.1\n")])])]),a("h4",{attrs:{id:"linux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[e._v("#")]),e._v(" Linux")]),e._v(" "),a("p",[e._v("First enable port redirection:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('echo "1" > /proc/sys/net/ipv4/ip_forward\n')])])]),a("p",[e._v("Then add port redirect:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("iptables -t nat -A PREROUTING -s 127.0.0.1 -p tcp --dport 80 -j REDIRECT --to 8080`\niptables -t nat -A OUTPUT -s 127.0.0.1 -p tcp --dport 80 -j REDIRECT --to 8080`\n")])])]),a("p",[e._v("To remove simply replace in the previous command the "),a("code",[e._v("-D")]),e._v(" switch instead of the "),a("code",[e._v("-A")]),e._v(" switch.")])])}),[],!1,null,null,null);t.default=r.exports}}]);