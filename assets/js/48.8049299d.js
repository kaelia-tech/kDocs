(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{583:function(a,s,t){"use strict";t.r(s);var e=t(13),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"infrastructure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#infrastructure"}},[a._v("#")]),a._v(" Infrastructure")]),a._v(" "),t("h2",{attrs:{id:"docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[a._v("#")]),a._v(" Docker")]),a._v(" "),t("p",[a._v("Remove untaged/intermediate images generated by builds:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker rmi "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("docker images "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<none>"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'{print "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$3")]),a._v("}'")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),t("p",[a._v("Follow-up logs while running a container:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker logs container_name -f --tail "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("\n")])])]),t("p",[a._v("Get detailed healthcheck status for a running container:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker inspect -f "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'{{json .State.Health.Status}}'")]),a._v(" container_name\n")])])]),t("p",[a._v("Find the location of the log file of a container:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker inspect --format"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'{{.LogPath}}'")]),a._v(" container_name\n")])])]),t("p",[a._v("Find the location of a named volume of a container:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker volume inspect volume_name\n")])])]),t("p",[a._v("Export the logs with errors in a file:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker logs aktnmap "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" aktnmap.log "),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("2")]),a._v(">")]),t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("&1")]),a._v("\n")])])]),t("p",[a._v("Quick container fix:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("// Perform configuration changes inside the container "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" -it container_name "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n// Or copy configuration files to "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("host")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v(" back to container\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" container_name:/conf/config_file "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n// Edit config "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" config_file container_name:/conf\ndocker commit container_name repository:tag\ndocker-compose down "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\ndocker-compose up "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\n")])])]),t("p",[a._v("Check why a swarm service did not start (empty logs, no replica):")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("service")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" --no-trunc "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("serviceName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("To access host in Docker Desktop Edition on "),t("a",{attrs:{href:"https://docs.docker.com/docker-for-windows/networking/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Windows"),t("OutboundLink")],1),a._v(" or "),t("a",{attrs:{href:"https://docs.docker.com/docker-for-mac/networking/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Mac"),t("OutboundLink")],1),a._v(" use the special DNS name "),t("code",[a._v("host.docker.internal")]),a._v(".")]),a._v(" "),t("h2",{attrs:{id:"traefik"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#traefik"}},[a._v("#")]),a._v(" Traefik")]),a._v(" "),t("p",[a._v("Extract access logs for a given date time: "),t("code",[a._v('cat access.log | grep "10/Mar/2020:02" > access-10-03-2020-03.log')]),a._v("\nCheck access logs for a given HTTP error code: "),t("code",[a._v('cat access.log | grep "1.0\\" 404"')]),a._v(" or "),t("code",[a._v('cat access.log | grep "2.0\\" 404"')]),a._v("\nGzip access logs: "),t("code",[a._v("gzip -c access.log > access.log.gz")])]),a._v(" "),t("h2",{attrs:{id:"scaleway"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scaleway"}},[a._v("#")]),a._v(" Scaleway")]),a._v(" "),t("p",[a._v("A "),t("a",{attrs:{href:"https://gist.github.com/cnouguier/a1ecc88f67819a610ae8e4d221789a8c",target:"_blank",rel:"noopener noreferrer"}},[a._v("step-by-step configuration"),t("OutboundLink")],1),a._v(" of a new server with Docker and a single logical volume.")]),a._v(" "),t("h2",{attrs:{id:"networking"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#networking"}},[a._v("#")]),a._v(" Networking")]),a._v(" "),t("p",[a._v("List all running ssh sessions: "),t("code",[a._v("netstat -tnpa | grep 'ESTABLISHED.*sshd'")])]),a._v(" "),t("p",[a._v("List all ssh session attempts: "),t("code",[a._v("cat /var/log/auth.log")])]),a._v(" "),t("h3",{attrs:{id:"development-domains"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#development-domains"}},[a._v("#")]),a._v(" Development domains")]),a._v(" "),t("p",[a._v("Some development tasks like OAuth2 authentication have strict security concerns so that you cannot use "),t("code",[a._v("localhost")]),a._v(', non-standard ports or need to enforce HTTPS in all URLs. Here is how to setup a "fake" domain on your host.')]),a._v(" "),t("p",[a._v("Let's say we have our app running on "),t("code",[a._v("localhost:8080")]),a._v(" in HTTP or "),t("code",[a._v("localhost:8083")]),a._v(" in HTTPS. First, edit the "),t("code",[a._v("hosts")]),a._v(" file ("),t("em",[a._v("/etc/hosts")]),a._v(" under Linux or "),t("em",[a._v("C:\\Windows\\System32\\drivers\\etc\\hosts")]),a._v(" under Windows) and add this line to redirect the domain to local host:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("127.0.0.1 test.airbusoidc.com\n")])])]),t("p",[a._v("Then, since the "),t("code",[a._v("hosts")]),a._v(" file does not allow to manage port redirections we need to do so using the operating system network tools.")]),a._v(" "),t("h4",{attrs:{id:"windows"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[a._v("#")]),a._v(" Windows")]),a._v(" "),t("p",[a._v("To see what is currently running:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("netstat")]),a._v(" -a -n -p TCP "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"LISTENING"')]),a._v("\n")])])]),t("p",[a._v("To add port redirection for HTTP:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("netsh interface portproxy "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" v4tov4 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("listenport")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("listenaddress")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("connectport")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8080")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("connectaddress")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n")])])]),t("p",[a._v("To add port redirection for HTTPS:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("netsh interface portproxy "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" v4tov4 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("listenport")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("443")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("listenaddress")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("connectport")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8083")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("connectaddress")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n")])])]),t("p",[a._v("To see running proxied port:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("netsh interface portproxy show v4tov4\n")])])]),t("p",[a._v("To see remove proxied port:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("netsh interface portproxy delete v4tov4 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("listenport")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("listenaddress")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n")])])]),t("h4",{attrs:{id:"linux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[a._v("#")]),a._v(" Linux")]),a._v(" "),t("p",[a._v("First enable port redirection:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" /proc/sys/net/ipv4/ip_forward\n")])])]),t("p",[a._v("Then add port redirect:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("iptables -t nat -A PREROUTING -s "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1 -p tcp --dport "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(" -j REDIRECT --to "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8080")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("\niptables -t nat -A OUTPUT -s "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1 -p tcp --dport "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(" -j REDIRECT --to "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8080")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\n")])])]),t("p",[a._v("To remove simply replace in the previous command the "),t("code",[a._v("-D")]),a._v(" switch instead of the "),t("code",[a._v("-A")]),a._v(" switch.")])])}),[],!1,null,null,null);s.default=r.exports}}]);